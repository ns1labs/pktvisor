#
name: "CodeQL"

on:
  schedule:
  #run 5 minutes after midnight daily
    - cron: '5 0 * * *'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false

    env:
      CC: gcc
      CXX: g++

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free disk space
      run: | 
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo apt clean
        df -h

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'cpp'
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        
        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality
        queries: ./.github/codeql/security.qls
        config-file: ./.github/codeql/config.yml
        
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    # - name: Autobuild
    #   uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines. 
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    - run: |
        # Run Build - set up dependencies, env vars, compile, and make test
        #install conan
        pip install --no-cache-dir conan --force-reinstall
        # clone the repository, not sure if this needs to be done
        git clone https://github.com/netboxlabs/pktvisor.git
        cd pktvisor
        mkdir build && cd build
        # configure and handle dependencies
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=./cmake/conan_provider.cmake ..
        # build and run tests
        sudo make all test
        #remove conan files
        rm -rf conan_home/

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:cpp"
        output: sarif-results
        upload: failure-only

    - name: filter-sarif
      uses: advanced-security/filter-sarif@v1
      with:
        patterns: |
          -pktvisor/build/conan_home/**/*
        input: sarif-results/cpp.sarif
        output: sarif-results/cpp.sarif

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: sarif-results/cpp.sarif

    - name: Upload loc as a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: sarif-results
        path: sarif-results
        retention-days: 1
