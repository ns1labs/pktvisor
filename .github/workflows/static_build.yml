name: Static Build

on:
  workflow_dispatch:
  pull_request:
    branches:
      - develop
      - release
  push:
    branches:
      - develop
      - release

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Build and test static base
        run: |
          docker build -f docker/Dockerfile.static-base -t ns1labs/static-base .

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: |
          echo "VERSION=`docker run --rm -a stdout --entrypoint cat ns1labs/static-base VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'master'
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV

      - name: Generate ref tag (develop)
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'develop'
        run: |
          echo "REF_TAG=latest-develop" >> $GITHUB_ENV

      - name: Generate ref tag (release candidate)
        if: github.event_name != 'pull_request' && env.BRANCH_NAME == 'release'
        run: |
          echo "REF_TAG=latest-rc" >> $GITHUB_ENV

      - name: Debug ref tag
        if: github.event_name != 'pull_request'
        run: echo ${{ env.REF_TAG }}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push static pktvisord container
        if: github.event_name != 'pull_request'
        env:
          BASE_BINARY: pktvisord
          IMAGE_NAME: ns1labs/pktvisord
        run: |
          docker build -f docker/Dockerfile.${{ env.BASE_BINARY }}-static -t ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }} -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }} .
          docker push -a ${{ env.IMAGE_NAME }}
          echo "CONT_ID=$(docker create --name ${{ env.BASE_BINARY }}-slim-tmp ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }})" >> $GITHUB_ENV

      - name: Extract static pktvisord asset
        if: github.event_name != 'pull_request'
        env:
          BASE_BINARY: pktvisord
          IMAGE_NAME: ns1labs/pktvisord
        run: |
          docker cp ${{ env.CONT_ID }}:/${{ env.BASE_BINARY }} ${{github.workspace}}/${{ env.BASE_BINARY }}-linux-x86_64-${{ env.VERSION }}

      - name: Upload pktvisord artifact
        if: github.event_name != 'pull_request'
        env:
          BINARY_NAME: pktvisord-linux-x86_64-${{ env.VERSION }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{github.workspace}}/${{ env.BINARY_NAME }}

      - name: Build and push static pktvisor-reader container
        if: github.event_name != 'pull_request'
        env:
          BASE_BINARY: pktvisor-reader
          IMAGE_NAME: ns1labs/pktvisor-reader
        run: |
          docker build -f docker/Dockerfile.${{ env.BASE_BINARY }}-static -t ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }} -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }} .
          docker push -a ${{ env.IMAGE_NAME }}
          echo "CONT_ID=$(docker create --name ${{ env.BASE_BINARY }}-slim-tmp ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }})" >> $GITHUB_ENV

      - name: Extract static pktvisor-reader asset
        if: github.event_name != 'pull_request'
        env:
          BASE_BINARY: pktvisor-reader
          IMAGE_NAME: ns1labs/pktvisor-reader
        run: |
          docker cp ${{ env.CONT_ID }}:/${{ env.BASE_BINARY }} ${{github.workspace}}/${{ env.BASE_BINARY }}-linux-x86_64-${{ env.VERSION }}

      - name: Upload pktvisor-reader artifact
        if: github.event_name != 'pull_request'
        env:
          BINARY_NAME: pktvisor-reader-linux-x86_64-${{ env.VERSION }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{github.workspace}}/${{ env.BINARY_NAME }}
