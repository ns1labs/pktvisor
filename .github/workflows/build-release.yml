name: Build-release

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1
  CONAN_NON_INTERACTIVE: 1
  CONAN_REVISIONS_ENABLED: 1

jobs:
  unit-tests:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        # You may pin to the exact commit or the version.
        # uses: turtlebrowser/get-conan@4dc7e6dd45c8b1e02e909979d7cfc5ebba6ddbe2
        uses: turtlebrowser/get-conan@v1.0

      - name: linux package install
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends jq

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: PKG_CONFIG_PATH=${{github.workspace}}/local/lib/pkgconfig cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -- -j 2

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

      - name: Login to ns1labs conan
        run: CONAN_USER_HOME=${{github.workspace}}/build/conan_home conan user -p ${{ secrets.CONAN_LABS_PASSWORD }} -r ns1labs ${{ secrets.CONAN_LABS_USERNAME }}

      - name: Cache conan packages
        run: CONAN_USER_HOME=${{github.workspace}}/build/conan_home conan upload "*" --all -r ns1labs -c

  prebuild-package:
    needs: [ unit-tests ]
    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.build.outputs.version }}
      branch_name: ${{ steps.branch.outputs.name }}
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      
      - name: Remove suffix from Cmakelists.txt file
        run: |
          ESCAPED_REPLACE_RELEASE=$(printf '%s\n' 'VISOR_PRERELEASE ""' | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/VISOR_PRERELEASE \"-develop\"/$ESCAPED_REPLACE_RELEASE/g" CMakeLists.txt

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Configure CMake to generate VERSION
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE     

      - name: Get VERSION
        id: build
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV
          echo "::set-output name=version::$(cat ${{github.workspace}}/build/VERSION)"

      - name: Get branch name
        id: branch
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "::set-output name=name::$(echo ${GITHUB_REF#refs/heads/} | tr / -)" 

      - name: Persist to workspace
        uses: actions/upload-artifact@v2
        with:
          name: workspace
          path: ./
          retention-days: 1
          
  release:
    needs: [ unit-tests ]
    runs-on: ubuntu-latest
    # if this is a push into one of our main branches (rather than just a pull request), we will also package
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Remove suffix from Cmakelists.txt file
        run: |
          ESCAPED_REPLACE_RELEASE=$(printf '%s\n' 'VISOR_PRERELEASE ""' | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/VISOR_PRERELEASE \"-develop\"/$ESCAPED_REPLACE_RELEASE/g" CMakeLists.txt

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Configure CMake to generate VERSION
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        
      - name: Set variables
        run: |
          echo "LAST_TAG=`git tag --sort=committerdate | tail -1`" >> $GITHUB_ENV
          echo "TAG=v`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV
        
      - name: Generate release changelog
        run: |
          echo "# What's new" > changelog.md
          git log ${{ env.LAST_TAG }}..HEAD --pretty=format:"$ad- %s [%an]" >> changelog.md

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.VERSION }}
          body_path: ${{github.workspace}}/changelog.md
          draft: false
          prerelease: false

  spinup-arm64-runner:
    needs: [ package-amd64, prebuild-package ]
    runs-on: ubuntu-latest
    outputs:
      runner_token: ${{ steps.token.outputs.runner }}
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate runner token
        id: token
        run: |
          sleep 3
          curl -X POST -H "authorization: Bearer ${{ secrets.BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/ns1labs/pktvisor/actions/runners/registration-token -o token.json
          echo "::set-output name=runner::$(cat token.json | jq .token --raw-output )"
          cat token.json

      - name: Inject runner token in user_data.sh
        run: |
          cd .github/hosted-runner/arm64/
          ESCAPED_REPLACE_RUNNER_TOKEN=$(printf '%s\n' "${{ steps.token.outputs.runner }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/RUNNER_TOKEN/$ESCAPED_REPLACE_RUNNER_TOKEN/g" user_data.sh
          
      - name: Get short commit hash to a variable
        id: commit_hash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Inject AWS key
        run: |
          cd .github/hosted-runner/arm64/
          ESCAPED_REPLACE_KEY_ID=$(printf '%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSID/$ESCAPED_REPLACE_KEY_ID/g" vars.tf
          ESCAPED_REPLACE_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSSECRET/$ESCAPED_REPLACE_ACCESS_KEY/g" vars.tf
          ESCAPED_REPLACE_ENVIRONMENT=$(printf '%s\n' "${{ needs.prebuild-package.outputs.branch_name }}-${{ steps.commit_hash.outputs.sha_short }}-release" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/ENVIRONMENT/$ESCAPED_REPLACE_ENVIRONMENT/g" vars.tf

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd .github/hosted-runner/arm64/
          terraform init -input=false

      - name: Terraform plan
        run: |
          cd .github/hosted-runner/arm64/
          terraform plan -out=tfplan

      - name: Terraform apply
        run: |
          cd .github/hosted-runner/arm64/
          terraform apply -auto-approve tfplan

      - name: Terraform output
        run: |
          cd .github/hosted-runner/arm64/
          terraform output -raw ip > ip.txt
          
      - name: Persist IP to workspace
        uses: actions/upload-artifact@v2
        with:
          name: ip-arm
          path: |
            .github/hosted-runner/arm64/ip.txt
          retention-days: 1

      - name: Persist to workspace
        uses: actions/upload-artifact@v2
        with:
          name: terraform
          path: |
            .github/hosted-runner/arm64/terraform.tfstate
          retention-days: 1

  spinup-amd64-runner:
    needs: [ prebuild-package ]
    runs-on: ubuntu-latest
    outputs:
      runner_token: ${{ steps.token.outputs.runner }}
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate runner token
        id: token
        run: |
          curl -X POST -H "authorization: Bearer ${{ secrets.BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/ns1labs/pktvisor/actions/runners/registration-token -o token.json
          echo "::set-output name=runner::$(cat token.json | jq .token --raw-output )"
          cat token.json

      - name: Inject runner token in user_data.sh
        run: |
          cd .github/hosted-runner/amd64/
          ESCAPED_REPLACE_RUNNER_TOKEN=$(printf '%s\n' "${{ steps.token.outputs.runner }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/RUNNER_TOKEN/$ESCAPED_REPLACE_RUNNER_TOKEN/g" user_data.sh
          
      - name: Get short commit hash to a variable
        id: commit_hash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Inject AWS key
        run: |
          cd .github/hosted-runner/amd64/
          ESCAPED_REPLACE_KEY_ID=$(printf '%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSID/$ESCAPED_REPLACE_KEY_ID/g" vars.tf
          ESCAPED_REPLACE_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSSECRET/$ESCAPED_REPLACE_ACCESS_KEY/g" vars.tf
          ESCAPED_REPLACE_ENVIRONMENT=$(printf '%s\n' "${{ needs.prebuild-package.outputs.branch_name }}-${{ steps.commit_hash.outputs.sha_short }}-release" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/ENVIRONMENT/$ESCAPED_REPLACE_ENVIRONMENT/g" vars.tf         

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd .github/hosted-runner/amd64/
          terraform init -input=false

      - name: Terraform plan
        run: |
          cd .github/hosted-runner/amd64/
          terraform plan -out=tfplan

      - name: Terraform apply
        run: |
          cd .github/hosted-runner/amd64/
          terraform apply -auto-approve tfplan

      - name: Terraform output
        run: |
          cd .github/hosted-runner/amd64/
          terraform output -raw ip > ip.txt
          
      - name: Persist IP to workspace
        uses: actions/upload-artifact@v2
        with:
          name: ip
          path: |
            .github/hosted-runner/amd64/ip.txt
          retention-days: 1

      - name: Persist to workspace
        uses: actions/upload-artifact@v2
        with:
          name: terraform2
          path: |
            .github/hosted-runner/amd64/terraform.tfstate
          retention-days: 1

  package-arm64:
    needs: [ spinup-arm64-runner ]
    runs-on: [self-hosted, linux, ARM64]
    if: github.event_name != 'pull_request'
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: ${{ env.BRANCH_NAME == 'master' }}
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV
          echo "PRERELEASE=false" >> $GITHUB_ENV
          echo "DRAFT=true" >> $GITHUB_ENV

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build + push - pktvisor (multi-arch)
        env:
          IMAGE_NAME: ghcr.io/ns1labs/pktvisor
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}:arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ghtoken=${{ secrets.GITHUB_TOKEN }}

  package-armv7:
    needs: [ spinup-amd64-runner ]
    runs-on: [self-hosted, linux, x64]
    if: github.event_name != 'pull_request'
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: ${{ env.BRANCH_NAME == 'master' }}
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV
          echo "PRERELEASE=false" >> $GITHUB_ENV
          echo "DRAFT=true" >> $GITHUB_ENV

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build + push - pktvisor (multi-arch)
        env:
          IMAGE_NAME: ghcr.io/ns1labs/pktvisor
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/Dockerfile
          platforms: linux/arm/v7
          push: true
          tags: ${{ env.IMAGE_NAME }}:armv7
          build-args: |
            ghtoken=${{ secrets.GITHUB_TOKEN }}

  package-amd64:
    needs: [ prebuild-package ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: ${{ env.BRANCH_NAME == 'master' }}
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV
          echo "PRERELEASE=false" >> $GITHUB_ENV
          echo "DRAFT=true" >> $GITHUB_ENV

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build + push - pktvisor (multi-arch)
        env:
          IMAGE_NAME: ghcr.io/ns1labs/pktvisor
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME }}:amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ghtoken=${{ secrets.GITHUB_TOKEN }}

  remove-github-runner-arm64:
    needs: [ package-arm64 ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: ip-arm

      - name: Get runner ip
        id: address
        run: |
          ls -lha
          echo "::set-output name=ip::$(cat ip.txt)"
          
      - name: Generate remove runner token
        id: remove-token-arm64
        run: |
          curl -X POST -H "authorization: Bearer ${{ secrets.BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/ns1labs/pktvisor/actions/runners/remove-token -o token.json
          echo "::set-output name=remove-runner::$(cat token.json | jq .token --raw-output )"
          cat token.json
          echo "TOKEN_RUNNER_ARM64=$(cat token.json | jq .token --raw-output )" >> $GITHUB_ENV

      - name: Executing remote ssh commands on runner
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.address.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.RUNNER_SSH_KEY }}
          port: 22
          script: |
               cd /actions-runner
               sudo chmod 777 . -R
               ./config.sh remove --token ${{ env.TOKEN_RUNNER_ARM64 }}

  remove-arm64-runner:
    needs: [ remove-github-runner-arm64 ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: terraform
          path: .github/hosted-runner/arm64/

      - name: Inject AWS key
        run: |
          cd .github/hosted-runner/arm64/
          ESCAPED_REPLACE_KEY_ID=$(printf '%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSID/$ESCAPED_REPLACE_KEY_ID/g" vars.tf
          ESCAPED_REPLACE_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSSECRET/$ESCAPED_REPLACE_ACCESS_KEY/g" vars.tf
         
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform Init
        run: |
          cd .github/hosted-runner/arm64/
          terraform init -input=false

      - name: Terraform plan destroy
        run: |
          cd .github/hosted-runner/arm64/
          terraform plan -destroy
        continue-on-error: true

      - name: Terraform destroy
        run: |
          cd .github/hosted-runner/arm64/
          terraform destroy -auto-approve

  remove-github-runner-amd64:
    needs: [ package-armv7 ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: ip

      - name: Get runner ip
        id: address
        run: |
          ls -lha
          echo "::set-output name=ip::$(cat ip.txt)"
          
      - name: Generate remove runner token
        id: remove-token-amd64
        run: |
          curl -X POST -H "authorization: Bearer ${{ secrets.BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/ns1labs/pktvisor/actions/runners/remove-token -o token.json
          echo "::set-output name=remove-runner::$(cat token.json | jq .token --raw-output )"
          cat token.json
          echo "TOKEN_RUNNER_AMD64=$(cat token.json | jq .token --raw-output )" >> $GITHUB_ENV

      - name: Executing remote ssh commands on runner
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.address.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.RUNNER_SSH_KEY }}
          port: 22
          script: |
               cd /actions-runner
               sudo chmod 777 . -R
               ./config.sh remove --token ${{ env.TOKEN_RUNNER_AMD64 }}

  remove-amd64-runner:
    needs: [ remove-github-runner-amd64 ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: terraform2
          path: .github/hosted-runner/amd64/

      - name: Inject AWS key
        run: |
          cd .github/hosted-runner/amd64/
          ESCAPED_REPLACE_KEY_ID=$(printf '%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSID/$ESCAPED_REPLACE_KEY_ID/g" vars.tf
          ESCAPED_REPLACE_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSSECRET/$ESCAPED_REPLACE_ACCESS_KEY/g" vars.tf

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform Init
        run: |
          cd .github/hosted-runner/amd64/
          terraform init -input=false

      - name: Terraform plan destroy
        run: |
          cd .github/hosted-runner/amd64/
          terraform plan -destroy
        continue-on-error: true

      - name: Terraform destroy
        run: |
          cd .github/hosted-runner/amd64/
          terraform destroy -auto-approve

  pushing-manifests:
    needs: [ package-amd64 , package-arm64 , package-armv7 ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create docker manifest
        run: |
          docker manifest create ghcr.io/ns1labs/pktvisor:latest \
          ghcr.io/ns1labs/pktvisor:amd64 \
          ghcr.io/ns1labs/pktvisor:armv7 \
          ghcr.io/ns1labs/pktvisor:arm64

      - name: Push manifest to ghcr.io
        run: |
          docker manifest push ghcr.io/ns1labs/pktvisor:latest

      - name: Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo
          
      - name: Login skopeo to ghcr
        run: |
          sudo skopeo login -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io

      - name: Login skopeo to dockerhub
        run: |
          sudo skopeo login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

      - name: Copy from ghcr.io to docker.io
        run: |
          sudo skopeo copy \
          --all \
          docker://ghcr.io/ns1labs/pktvisor:latest \
          docker://docker.io/ns1labs/pktvisor:latest
