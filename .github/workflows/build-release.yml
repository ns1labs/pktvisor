name: Build-release

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1
  CONAN_NON_INTERACTIVE: 1
  CONAN_REVISIONS_ENABLED: 1

jobs:
  unit-tests:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        id: conan
        uses: turtlebrowser/get-conan@c171f295f3f507360ee018736a6608731aa2109d #v1.2

      - name: Setup Conan Cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build/conan_home/
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.py', '*/conanfile.py') }}
          restore-keys: conan-${{ runner.os }}-

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: PKG_CONFIG_PATH=${{github.workspace}}/local/lib/pkgconfig cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=./cmake/conan_provider.cmake

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE -- -j 4

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: sudo ctest -C $BUILD_TYPE

  prebuild-package:
    needs: [ unit-tests ]
    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.build.outputs.version }}
      branch_name: ${{ steps.branch.outputs.name }}
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Remove suffix from Cmakelists.txt file
        run: |
          ESCAPED_REPLACE_RELEASE=$(printf '%s\n' 'VISOR_PRERELEASE ""' | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/VISOR_PRERELEASE \"-develop\"/$ESCAPED_REPLACE_RELEASE/g" CMakeLists.txt

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        id: conan
        uses: turtlebrowser/get-conan@c171f295f3f507360ee018736a6608731aa2109d #v1.2

      - name: Configure CMake to generate VERSION
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=./cmake/conan_provider.cmake

      - name: Get VERSION
        id: build
        run: echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Get branch name
        id: branch
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Persist to workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: ./
          retention-days: 1
          
  release:
    needs: [ unit-tests ]
    runs-on: ubuntu-latest
    # if this is a push into one of our main branches (rather than just a pull request), we will also package
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Remove suffix from Cmakelists.txt file
        run: |
          ESCAPED_REPLACE_RELEASE=$(printf '%s\n' 'VISOR_PRERELEASE ""' | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/VISOR_PRERELEASE \"-develop\"/$ESCAPED_REPLACE_RELEASE/g" CMakeLists.txt

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        id: conan
        uses: turtlebrowser/get-conan@c171f295f3f507360ee018736a6608731aa2109d #v1.2

      - name: Configure CMake to generate VERSION
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=./cmake/conan_provider.cmake
        
      - name: Set variables
        run: |
          echo "LAST_TAG=`git tag --sort=committerdate | tail -1`" >> $GITHUB_ENV
          echo "TAG=v`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV
        
      - name: Generate release changelog
        run: |
          echo "# What's new" > changelog.md
          git log ${{ env.LAST_TAG }}..HEAD --pretty=format:"$ad- %s [%an]" >> changelog.md
          sed -i -e "s/- /â€¢ /g" changelog.md
          
      - name: Post pktvisor changelog in slack channel
        run: |
          curl -d "text=:mega: *Pktvisor release reporter* :mega:
          $(cat changelog.md)" -d "channel=C041B9204CF" -H "Authorization: Bearer ${{secrets.SLACK_APP_TOKEN}}" -X POST https://slack.com/api/chat.postMessage          

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.VERSION }}
          body_path: ${{github.workspace}}/changelog.md
          draft: false
          prerelease: false
          
  build-win64:
    runs-on: windows-2019
    outputs:
      version_number: ${{ env.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}\build

      - name: Get Conan
        id: conan
        uses: turtlebrowser/get-conan@c171f295f3f507360ee018736a6608731aa2109d #v1.2

      - name: Setup Conan Cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build/conan_home/
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.py', '*/conanfile.py') }}
          restore-keys: conan-${{ runner.os }}-

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}\build
        run: PKG_CONFIG_PATH=${{github.workspace}}\local\lib\pkgconfig cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=./cmake/conan_provider.cmake

      - name: Get VERSION
        shell: pwsh
        id: build
        run: |
          $text = Get-Content ${{github.workspace}}\build\VERSION -Raw 
          echo "VERSION=$text" >> $env:GITHUB_ENV

      - name: Build
        working-directory: ${{github.workspace}}\build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -- -m
      
      # TODO: Fix unit tests for windows platform
      #- name: Test
      #  working-directory: ${{github.workspace}}/build
      #  shell: bash
      #  # Execute tests defined by the CMake configuration.
      #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #  run: ctest -C $BUILD_TYPE
       
      - name: Debug artifacts
        shell: pwsh
        run: |
          Get-ChildItem -Force ${{github.workspace}}
          Get-ChildItem -Force ${{github.workspace}}\build
          Get-ChildItem -Force ${{github.workspace}}\build\bin
                         
      - name: Persist to workspace
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            ${{github.workspace}}\build\bin\pktvisor-reader.exe
            ${{github.workspace}}\build\bin\pktvisord.exe
            ${{github.workspace}}\golang\pkg\client\version.go
          retention-days: 1
          
  build-cli-win64:
    needs: [ build-win64, release ]
    runs-on: ubuntu-latest
    steps:    
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Attach to workspace
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          
      - name: Debug artifacts
        shell: bash
        run: |
          ls -lha
          
      - name: Debug artifacts
        shell: bash
        run: |
          mv src pktvisor-src
          cp -rpf golang/pkg/client/version.go .

      - name: Build pktvisor-cli
        uses: ./.github/actions/build-go
        with:
          context: "."
          goos: windows
          file: "./Dockerfile"
          
      - name: Debug artifacts
        shell: bash
        run: |
          mv ./pktvisor-cli pktvisor-cli.exe
          mv ./build/bin/pktvisord.exe ./pktvisord.exe
          mv ./build/bin/pktvisor-reader.exe ./pktvisor-reader.exe
          
      - name: compacting windows binary
        run: |
          zip pktvisor-win64.zip pktvisor-cli.exe pktvisor-reader.exe pktvisord.exe
          
      - name: Upload win64 binary to latest release
        shell: bash
        run: |
          chmod a+x ./docker/upload-gh-asset.sh
          ./docker/upload-gh-asset.sh github_api_token=${{ secrets.BOT_TOKEN }} owner=netboxlabs repo=pktvisor tag=LATEST filename=./pktvisor-win64.zip

  package-arm64:
    needs: [ prebuild-package ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Setup Conan Cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build/conan_home/
          key: conan-${{ runner.os }}-arm64-${{ hashFiles('conanfile.py', '*/conanfile.py') }}
          restore-keys: conan-${{ runner.os }}-arm64-

      - name: Build pktvisord + push symbol to backtrace.io
        uses: ./.github/actions/build-cpp
        with:
          context: "."
          build_type: "Release"
          asan: "OFF"
          bugsplat_key: ${{secrets.BUGSPLAT_KEY}}
          bugsplat_symbol_url: ${{secrets.BUGSPLAT_SYMBOL_URL}}
          bugsplat: "false"
          file: "./Dockerfile"

      - name: Build pktvisor-cli
        uses: ./.github/actions/build-go
        with:
          context: "."
          goarch: arm64
          file: "./Dockerfile"

      - name: Debug artifacts
        run: ls -lha .

      - name: compacting arm64 binary
        run: |
          zip pktvisor-arm64.zip pktvisor-cli pktvisor-reader pktvisord
          
      - name: Upload arm64 binary to latest release
        run: |
          chmod a+x ./docker/upload-gh-asset.sh
          ./docker/upload-gh-asset.sh github_api_token=${{ secrets.BOT_TOKEN }} owner=netboxlabs repo=pktvisor tag=LATEST filename=./pktvisor-arm64.zip  

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: ${{ env.BRANCH_NAME == 'master' }}
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 #v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf #v3.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 #v3.8.0

      - name: Replace token
        run: |
          sed -i -e "s/CP_TOKEN/${{ secrets.CRASHPAD_TOKEN }}/g" docker/run.sh

      - name: Replace escape url
        run: |
          REPLACE=${{ secrets.BUGSPLAT_CP_URL }}
          ESCAPED_REPLACE=$(printf '%s\n' "$REPLACE" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/CP_URL/$ESCAPED_REPLACE/g" docker/run.sh

      - name: Build + push - pktvisor (multi-arch)
        id: docker_build
        env:
          IMAGE_NAME: netboxlabs/pktvisor
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 #v6.10.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/Dockerfile.crashhandler
          platforms: linux/arm64
          tags: ${{ env.IMAGE_NAME }}:latest, ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          outputs: type=docker,dest=/tmp/arm64.tar

      - name: Load image
        env:
          IMAGE_NAME: netboxlabs/pktvisor
        run: |
          docker load --input /tmp/arm64.tar
          docker image ls -a
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}


  package-amd64:
    needs: [ prebuild-package ]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ env.VERSION }}
    if: github.event_name != 'pull_request'
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Setup Conan Cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build/conan_home/
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.py', '*/conanfile.py') }}
          restore-keys: conan-${{ runner.os }}-

      - name: Build pktvisord + push symbol to backtrace.io
        uses: ./.github/actions/build-cpp
        with:
          context: "."
          build_type: "Release"
          asan: "OFF"
          bugsplat_key: ${{secrets.BUGSPLAT_KEY}}
          bugsplat_symbol_url: ${{secrets.BUGSPLAT_SYMBOL_URL}}
          bugsplat: "true"
          file: "./Dockerfile"

      - name: Build pktvisor-cli
        uses: ./.github/actions/build-go
        with:
          context: "."
          file: "./Dockerfile"

      - name: Debug artifacts
        run: ls -lha .
        
      - name: compacting amd64 binary
        run: |
          zip pktvisor-amd64.zip pktvisor-cli pktvisor-reader pktvisord
          
      - name: Upload amd64 binary to latest release
        run: |
          chmod a+x ./docker/upload-gh-asset.sh
          ./docker/upload-gh-asset.sh github_api_token=${{ secrets.BOT_TOKEN }} owner=netboxlabs repo=pktvisor tag=LATEST filename=./pktvisor-amd64.zip 

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: ${{ env.BRANCH_NAME == 'master' }}
        run: echo "REF_TAG=latest" >> $GITHUB_ENV

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 #v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 #v3.8.0
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf #v3.2.0
        
      - name: Replace token
        run: |
          sed -i -e "s/CP_TOKEN/${{ secrets.CRASHPAD_TOKEN }}/g" docker/run.sh

      - name: Replace escape url
        run: |
          REPLACE=${{ secrets.BUGSPLAT_CP_URL }}
          ESCAPED_REPLACE=$(printf '%s\n' "$REPLACE" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/CP_URL/$ESCAPED_REPLACE/g" docker/run.sh

      - name: Build + push - pktvisor (multi-arch)
        env:
          IMAGE_NAME: netboxlabs/pktvisor
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 #v6.10.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/Dockerfile.crashhandler
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:latest,  ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          outputs: type=docker,dest=/tmp/amd64.tar

      - name: Load image
        env:
          IMAGE_NAME: netboxlabs/pktvisor
        run: |
          docker load --input /tmp/amd64.tar
          docker image ls -a
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}