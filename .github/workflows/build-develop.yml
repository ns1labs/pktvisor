name: Build

on:
  workflow_dispatch:
  pull_request:
    branches:
      - develop
      - multi-arch-images
  push:
    branches:
      - develop
      - multi-arch-images
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1
  CONAN_NON_INTERACTIVE: 1
  CONAN_REVISIONS_ENABLED: 1

jobs:
  unit-tests:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        # You may pin to the exact commit or the version.
        # uses: turtlebrowser/get-conan@4dc7e6dd45c8b1e02e909979d7cfc5ebba6ddbe2
        uses: turtlebrowser/get-conan@v1.0

      - name: linux package install
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends jq

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: PKG_CONFIG_PATH=${{github.workspace}}/local/lib/pkgconfig cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -- -j 2

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

#      - name: Login to ns1labs conan
#        run: CONAN_USER_HOME=${{github.workspace}}/build/conan_home conan user -p ${{ secrets.CONAN_LABS_PASSWORD }} -r ns1labs ${{ secrets.CONAN_LABS_USERNAME }}
#
#      - name: Cache conan packages
#        run: CONAN_USER_HOME=${{github.workspace}}/build/conan_home conan upload "*" --all -r ns1labs -c

  package:
    needs: unit-tests
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.build }}
    # if this is a push into one of our main branches (rather than just a pull request), we will also package
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Configure CMake to generate VERSION
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        id: version
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV
          echo "::set-output name=build::$(cat ${{github.workspace}}/build/VERSION)"

      - name: Debug version
        run: |
          echo ${{ env.VERSION }}
          echo ${{ steps.version.outputs.build }}

      - name: Generate ref tag (develop)
        if: ${{ env.BRANCH_NAME == 'develop' || env.BRANCH_NAME == 'multi-arch-images' }}
        run: |
          echo "REF_TAG=latest-develop" >> $GITHUB_ENV
          echo "PRERELEASE=true" >> $GITHUB_ENV
          echo "DRAFT=false" >> $GITHUB_ENV

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build + push - pktvisor (multi-arch)
        env:
          IMAGE_NAME: ns1labs/pktvisor
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ env.VERSION }} , ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build + push - pktvisor-cli
        env:
          CLI_BINARY: pktvisor-cli
          IMAGE_NAME: ns1labs/pktvisor-cli
        run: |
          docker build . --file docker/Dockerfile.pktvisor-cli --tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }} --tag ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }}
          #docker push -a ${{ env.IMAGE_NAME }}
          echo "CONT_ID=$(docker create --name ${{ env.CLI_BINARY }}-slim-tmp ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }})" >> $GITHUB_ENV

      - name: Extract static pktvisor-cli asset
        env:
          CLI_BINARY: pktvisor-cli
          IMAGE_NAME: ns1labs/pktvisor-cli
        run: |
          docker cp ${{ env.CONT_ID }}:/${{ env.CLI_BINARY }} ${{github.workspace}}/${{ env.CLI_BINARY }}-linux-x86_64-${{ env.VERSION }}

      - name: Upload pktvisor-cli artifact
        env:
          BINARY_NAME: pktvisor-cli-linux-x86_64-${{ env.VERSION }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{github.workspace}}/${{ env.BINARY_NAME }}

      - name: Build + push - pktvisor-prom-write
        env:
          IMAGE_NAME: ns1labs/pktvisor-prom-write
        working-directory: ${{github.workspace}}/centralized_collection/prometheus/docker-grafana-agent
        run: |
          docker build . --file Dockerfile --build-arg PKTVISOR_TAG=${{ env.REF_TAG }} --tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }} --tag ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }}
          #docker push -a ${{ env.IMAGE_NAME }}

#      - name: Generate AppImage
#        env:
#          IMAGE_NAME: ns1labs/pktvisor
#        working-directory: ${{github.workspace}}/appimage
#        run: |
#          DEV_IMAGE="${{ env.IMAGE_NAME }}:${{ env.VERSION }}" DEV_MODE=t make pktvisor-x86_64.AppImage
#          mv pktvisor-x86_64.AppImage pktvisor-x86_64-${{ env.VERSION }}.AppImage
#
#      - name: Upload AppImage artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: pktvisor-x86_64-${{ env.VERSION }}.AppImage
#          path: ${{github.workspace}}/appimage/pktvisor-x86_64-${{ env.VERSION }}.AppImage

  spinup-amd64-runner:
    needs: [ package ]
    runs-on: ubuntu-latest
    outputs:
      runner_token: ${{ steps.token.outputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate runner token
        id: token
        run: |
          curl -X POST -H "authorization: Bearer ${{ secrets.BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/etaques/pktvisor/actions/runners/registration-token -o token.json
          echo "::set-output name=runner::$(cat token.json | jq .token --raw-output )"
          cat token.json

      - name: Inject runner token in user_data.sh
        run: |
          cd .github/hosted-runner/amd64/
          ESCAPED_REPLACE_RUNNER_TOKEN=$(printf '%s\n' "${{ steps.token.outputs.runner }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/RUNNER_TOKEN/$ESCAPED_REPLACE_RUNNER_TOKEN/g" user_data.sh

      - name: Inject AWS key
        run: |
          cd .github/hosted-runner/amd64/
          ESCAPED_REPLACE_KEY_ID=$(printf '%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSID/$ESCAPED_REPLACE_KEY_ID/g" vars.tf
          ESCAPED_REPLACE_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSSECRET/$ESCAPED_REPLACE_ACCESS_KEY/g" vars.tf

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform Init
        run: |
          cd .github/hosted-runner/amd64/
          terraform init -input=false

      - name: Terraform plan
        run: |
          cd .github/hosted-runner/amd64/
          terraform plan -out=tfplan

      - name: Terraform apply
        run: |
          cd .github/hosted-runner/amd64/
          terraform apply -auto-approve tfplan

      - name: Terraform output
        run: |
          cd .github/hosted-runner/amd64/
          terraform output -raw ip

      - name: Persist to workspace
        uses: actions/upload-artifact@v2
        with:
          name: terraform
          path: |
            .github/hosted-runner/amd64/terraform.tfstate
          retention-days: 1

  integration-tests:
    needs: [ spinup-amd64-runner ]
    runs-on: [ self-hosted, linux, x64 ]
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.sha_short }}
    # if this is a push into one of our main branches (rather than just a pull request), we will also package
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2

      - name: Locking pktvisor integration test state
        run: |
          curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -u "${{ secrets.QA_AUTH_CREDENTIALS }}" -d "change=pktvisor-dev&state=active" https://qa.ops.orb.live/api.php

      - name: Debug version
        run: |
          echo ${{ env.VERSION }}
          echo ${{ needs.package.outputs.version }}

      - name: Prepare test config
        run: |
          cd ./automated_tests/
          mv test_config.ini.tpl test_config.ini

      - name: commit hash
        id: commit_hash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"    

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Test
        continue-on-error: true
        run: |
          cd ./automated_tests/
          sudo apt-get install tcpreplay
          python3.8 -m venv behave_pktvisor
          source behave_pktvisor/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements.txt
          behavex -t=@smoke

      - name: Copy VERSION file
        run: |
          echo ${{ needs.package.outputs.version }}
          echo ${{ needs.package.outputs.version }} > ./automated_tests/output/VERSION 

      - name: Persist to workspace
        uses: actions/upload-artifact@v2
        with:
          name: workspace
          path: |
            ./automated_tests/
            !./automated_tests/behave_pktvisor
          retention-days: 1

      - name: Clean
        continue-on-error: true
        run: |
          cd ./automated_tests/
          behavex -t=@cleanup

      - name: Unlocking pktvisor integration test state
        run: |
          curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -u "${{ secrets.QA_AUTH_CREDENTIALS }}" -d "change=pktvisor-dev&state=inactive" https://qa.ops.orb.live/api.php
          
  upload-qa-artifact:
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: debug files
        run: |
          ls -lha

      - name: Upload pktvisor report to qa host
        uses: appleboy/scp-action@master
        with:
          host: qa.ops.orb.live
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 2022
          source: "./output/*"
          target: "/usr/share/nginx/html/pktvisor/develop/${{ needs.integration-tests.outputs.commit_hash }}/pktvisor/python-test"

  remove-amd64-runner:
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Attach to workspace
        uses: actions/download-artifact@v2
        with:
          name: terraform
          path: .github/hosted-runner/amd64/

      - name: Inject AWS key
        run: |
          cd .github/hosted-runner/amd64/
          ESCAPED_REPLACE_KEY_ID=$(printf '%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSID/$ESCAPED_REPLACE_KEY_ID/g" vars.tf
          ESCAPED_REPLACE_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/AWSSECRET/$ESCAPED_REPLACE_ACCESS_KEY/g" vars.tf

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform Init
        run: |
          cd .github/hosted-runner/amd64/
          terraform init -input=false

      - name: Terraform plan destroy
        run: |
          cd .github/hosted-runner/amd64/
          terraform plan -destroy
        continue-on-error: true

      - name: Terraform destroy
        run: |
          cd .github/hosted-runner/amd64/
          terraform destroy -auto-approve

  removing-github-runners:
    needs:
      - remove-amd64-runner
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Remove runner from github
        run: |
          curl -H "authorization: Bearer ${{ secrets.BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/etaques/pktvisor/actions/runners | jq '.runners[0].id' --raw-output > runner_id_0.txt
          RUNNER_ID=$(cat runner_id_0.txt)
          curl -X DELETE -H "authorization: Bearer ${{ secrets.BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/etaques/pktvisor/actions/runners/$RUNNER_ID