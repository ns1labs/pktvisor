name: Debug Builds

on:
  push:
    branches: [ develop, master, release/** ]

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  CONAN_NON_INTERACTIVE: 1
  CONAN_REVISIONS_ENABLED: 1

jobs:
  code-coverage:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Conan
        # You may pin to the exact commit or the version.
        # uses: turtlebrowser/get-conan@4dc7e6dd45c8b1e02e909979d7cfc5ebba6ddbe2
        uses: turtlebrowser/get-conan@v1.0

      - name: linux package install
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends jq lcov

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: PKG_CONFIG_PATH=${{github.workspace}}/local/lib/pkgconfig cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON

      - name: Get VERSION
        id: build
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV
          echo "::set-output name=version::$(cat ${{github.workspace}}/build/VERSION)"

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config Debug -- -j 2

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE
        
      - name: Build Coverage
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --target coverage -- -j 2

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          files: build/coverage.info
          name: pktvisor
          verbose: true

      - name: Login to ns1labs conan
        run: CONAN_USER_HOME=${{github.workspace}}/build/conan_home conan user -p ${{ secrets.CONAN_LABS_PASSWORD }} -r ns1labs ${{ secrets.CONAN_LABS_USERNAME }}

      - name: Cache conan packages
        run: CONAN_USER_HOME=${{github.workspace}}/build/conan_home conan upload "*" --all -r ns1labs -c

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build pktvisord + push symbol to backtrace.io
        uses: ./.github/actions/build-cpp
        with:
          context: "."
          build_type: "Debug"
          asan: "ON"
          symbol_url: ${{secrets.SYMBOL_URL}}
          bugsplat_key: ${{secrets.BUGSPLAT_KEY}}
          bugsplat_symbol_url: ${{secrets.BUGSPLAT_SYMBOL_URL}}
          bugsplat: "true"
          file: "./Dockerfile"

      - name: Build pktvisor-cli
        uses: ./.github/actions/build-go
        with:
          context: "."
          file: "./Dockerfile"

      - name: Debug artifacts
        run: ls -lha .

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pktvisor-artifacts
          path: ./
          retention-days: 1

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download to workspace
        uses: actions/download-artifact@v2
        with:
          name: pktvisor-artifacts

      - name: Get branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Debug branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: Get VERSION
        run: |
          echo "VERSION=`cat ${{github.workspace}}/build/VERSION`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Generate ref tag (master)
        if: ${{ env.BRANCH_NAME == 'master' }}
        run: |
          echo "REF_TAG=latest-debug" >> $GITHUB_ENV

      - name: Generate ref tag (develop)
        if: ${{ env.BRANCH_NAME == 'develop' }}
        run: |
          echo "REF_TAG=latest-develop-debug" >> $GITHUB_ENV

      - name: Generate ref tag (release candidate)
        if: ${{ env.BRANCH_NAME == 'release' }}
        run: |
          echo "REF_TAG=latest-rc-debug" >> $GITHUB_ENV

      - name: Debug ref tag
        run: echo ${{ env.REF_TAG }}

      - name: Replace token
        run: |
          sed -i -e "s/CP_TOKEN/${{ secrets.CRASHPAD_TOKEN }}/g" docker/run.sh

      - name: Replace escape url
        run: |
          REPLACE=${{ secrets.BUGSPLAT_CP_URL }}
          ESCAPED_REPLACE=$(printf '%s\n' "$REPLACE" | sed -e 's/[\/&]/\\&/g')
          sed -i -e "s/CP_URL/$ESCAPED_REPLACE/g" docker/run.sh

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, push debug image + crashhandler
        env:
          IMAGE_NAME: ns1labs/pktvisor
        run: |
          docker build . --file docker/Dockerfile.crashhandler --tag ${{ env.IMAGE_NAME }}:${{ env.REF_TAG }}
          docker push -a ${{ env.IMAGE_NAME }}
